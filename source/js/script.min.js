
// Навигиция сайта

const header = document.querySelector('.header');
const menu = document.querySelector('.menu');
const menuList = menu.querySelector('.menu__list');
const menuToggle = document.querySelector('.menu__toggle');

header.classList.remove('header--nojs');
menu.classList.add('menu--closed');
menu.classList.remove('menu--nojs');

menuToggle.addEventListener('click', function() {
  if (menu.classList.contains('menu--closed')) {
    menu.classList.remove('menu--closed');
    menu.classList.add('menu--open');
    menuList.style.transition = 'all 1s ease-in-out';
  } else {
    menu.classList.add('menu--closed');
    menu.classList.remove('menu--open');
  }
});

// Видео плеер

const videoPlayer = document.querySelector('.studio-design__wrap');
const poster = videoPlayer.querySelector('.studio-design__video-poster');
const video = videoPlayer.querySelector('.studio-design__video');
const playButton = videoPlayer.querySelector('.studio-design__button-play');

playButton.addEventListener('click', () => {
  if (video.paused) {
    video.play();
    playButton.classList.add('visually-hidden');
    poster.classList.add('visually-hidden');
  }
});

// Раскрытие скрытие текста

const points = document.querySelectorAll('.points');
const moreDetails = document.querySelectorAll('.more-details');
const moreDetailsBtn = document.querySelectorAll('.presentation__button');
const continuation = document.querySelectorAll('.continuation');

for ( let i = 0; i < moreDetailsBtn.length; i++) {
  moreDetailsBtn[i].addEventListener('click', () => {
    if (moreDetailsBtn[i].classList.contains('presentation__button--open')) {
      //Закрываем блок
      points[i].style.maxHeight = 'none';
      moreDetailsBtn[i].innerHTML = 'Подробнее';
      moreDetailsBtn[i].classList.remove('presentation__button--open');
      moreDetails[i].style.maxHeight = '0';
      continuation[i].style.maxHeight = '0';
    } else {
      //Открываем блок
      points[i].style.maxHeight = '0';
      moreDetailsBtn[i].innerHTML = 'Скрыть';
      moreDetailsBtn[i].classList.add('presentation__button--open');
      moreDetails[i].style.maxHeight = moreDetails[i].scrollHeight + 'px';
      continuation[i].style.maxHeight = continuation[i].scrollHeight + 'px';
    }
  });
};


//Popup contacts form

/*Ищем подходящий селектор во всем документе*/
const popupOpacity = document.querySelector('.popup-opacity');
const popupContactsForm = document.querySelector('.popup-contacts-form');
const buttonOpenForm = document.querySelectorAll('.button--open-form');
const popupSuccessfulSending = document.querySelector('.successful-sending');

/*Ищем подходящий селектор в форме*/
const popupClose = popupContactsForm.querySelectorAll('.button-close');
const formFeedback = popupContactsForm.querySelector('.contacts-form');
const nameField = popupContactsForm.querySelector('.contacts-form__input--name');
const emailField = popupContactsForm.querySelector('.contacts-form__input--email');

/*Не все браузеры поддерживают localStorage поэтому проверим работоспособность.*/
let isStorageSupport = true;
let storage = '';

try {
  storage = localStorage.getItem('name');
} catch (err) {
  isStorageSupport = false;
}

/*Обработчик событй для отображения формы */
for (let i = 0; i < buttonOpenForm.length; i++) {
  buttonOpenForm[i].addEventListener('click', function(evt) {

 /*Стандартное действие по умолчанию у ссылки переход на другую страницу.
 Такое поведение нам не нужно, поэтому отключим его.*/
    evt.preventDefault();
    popupContactsForm.classList.add('popup-contacts-form--show');
    if('popup-contacts-form--show') {
      popupOpacity.classList.add('popup-opacity--show');
    } else {
      popupOpacity.classList.remove('popup-opacity--show');
    }
    if(storage) {
      nameField.value = storage;
      emailField.focus();
     } else {
    /*Установим фокус при открытии модального окна в поле ввода логина. */
      nameField.focus();
    }
  });
};

  /*Обработчик событий для закрытия формы*/
  for (let i = 0; i < popupClose.length; i++) {
    popupClose[i].addEventListener('click', function(evt) {
      evt.preventDefault();
      popupContactsForm.classList.remove('popup-contacts-form--show');
      popupSuccessfulSending.classList.remove('successful-sending--show');
      // popupContactsForm.classList.remove('popup-form--error');
      popupOpacity.classList.remove('popup-opacity--show');
    });

    // /*Повесим обработчик отправки данных на форму и отменим его. */
    formFeedback.addEventListener('submit', function(evt) {
      if(!nameField.value || !emailField.value) {
        evt.preventDefault();
        popupContactsForm.classList.remove("popup-form-error");
        popupContactsForm.offsetWidth = popupContactsForm.offsetWidth;
        popupContactsForm.classList.add("popup-form-error");
      } else {
        if (isStorageSupport) {
          console.log(localStorage.setItem('name', nameField.value));
        }
      }
    });
  };

  /*Добавим обработчик события, который будет отлавливать
  нажатие кнопки Esc и в случае, если модальное окно открыто, закрывать его.*/
  window.addEventListener('keydown', function (evt) {
    if (evt.keyCode === 27) {
      if (popupContactsForm.classList.contains('popup-contacts-form--show') || popupOpacity.classList.contains('popup-opacity--show')) {
        evt.preventDefault();
        popupContactsForm.classList.remove('popup-contacts-form--show');
        // popupContactsForm.classList.remove('popup-form--error');
        popupOpacity.classList.remove('popup-opacity--show');
      }
    }
  });

// Popup slider functionaliry

const popupSliderShowGallery = document.querySelector('.popup-opacity--slider-show-gallery');
const popupSliderShowGalleryWrap = document.querySelector('.popup-slider-show-gallery-wrap');
const popupSliderShowGalleryList = document.querySelector('.popup-slider-show-gallery__list');
const sliderShowGallerySliderShowItems = document.querySelectorAll('.slider-show__item');
const sliderShowGalleryLink = document.querySelectorAll('.slider-show__link');

const btnCloseSliderShowGallery = document.querySelector('.button-close--slider-show-gallery');

const galleryLeftBtn = document.querySelector('#popup-slider-show-gallery-left');
const galleryRightBtn = document.querySelector('#popup-slider-show-gallery-right');
const gallerySliderShowItems = [];
let currentSliderShowIndex = 0;

//Fill gallery with images (Заполнить popup slider изображениями)

const initSliderShowGallery = () => {
    popupSliderShowGalleryList.innerHTML = '';
    sliderShowGallerySliderShowItems.forEach(item => {
        const img = item.querySelector('img');

        const slide = document.createElement('li');
        slide.className = 'popup-slider-show-gallery__item';
        slide.innerHTML = `<img class="popup-slider-show-gallery__img" src="${img.src}" alt="${img.alt}">
        <p class="popup-slider-show-gallery__text">${img.alt}</p>`;
        popupSliderShowGalleryList.appendChild(slide);
        gallerySliderShowItems.push(slide);
    });
};

const updateSliderShowGalleryPosition = () => {
    popupSliderShowGalleryList.style.transform = `translateX(-${currentSliderShowIndex * 100}%)`;
};

//Open gallery with specific slide (Открыть галерею с определенным слайдом)
const openSliderShowGallery = (index) => {
    if(gallerySliderShowItems.length === 0) initSliderShowGallery();
    
    currentSliderShowIndex = index;
    // popupSliderShowGalleryList.style.transform = `translateX(-${index * 100}%)`;
    updateSliderShowGalleryPosition();
    popupSliderShowGallery.classList.add('popup-opacity--show');
    popupSliderShowGalleryWrap.classList.add('popup-slider-show-gallery-wrap--show');
    document.body.classList.add('no-scroll');
};

// инициализация при загрузке
document.addEventListener('DOMContentLoaded', () => {
    sliderShowGalleryLink.forEach((link, index) => {
        link.addEventListener('click', (e) => {
            e.preventDefault();
            openSliderShowGallery(index);
        });
    });
});

//Close gallery (Закрыть попап слайдера c jxbcnrjq)
const closeShowGallery = () => {
    popupSliderShowGallery.classList.remove('popup-opacity--show');
    popupSliderShowGalleryWrap.classList.remove('popup-slider-show-gallery-wrap--show');
    document.body.classList.remove('no-scroll');

    //Очистка через 300ms (после завершения анимации)
    setTimeout(() => {
        popupSliderShowGalleryList.innerHTML = '';
        gallerySliderShowItems.length = 0;
    }, 300);
};

//Navigation controls
galleryLeftBtn.addEventListener('click', () => {
    currentSliderShowIndex = (currentSliderShowIndex > 0) ? currentSliderShowIndex - 1 : document.querySelectorAll('.popup-slider-show-gallery__item').length - 1;
    updateSliderShowGalleryPosition();
});

galleryRightBtn.addEventListener('click', () => {
    currentSliderShowIndex = (currentSliderShowIndex < document.querySelectorAll('.popup-slider-show-gallery__item').length - 1) ? currentSliderShowIndex + 1 : 0;
    updateSliderShowGalleryPosition();
});

//Close gallery
btnCloseSliderShowGallery.addEventListener('click', closeShowGallery);

//Close when clicking outside
popupSliderShowGallery.addEventListener('click', (e) => {
    if(e.target === popupSliderShowGallery) {
        closeShowGallery();
    }
});

// Keyboard navigation
window.addEventListener('keydown', (e) => {
    if(popupSliderShowGallery.classList.contains('popup-opacity--show') || popupSliderShowGalleryWrap.classList.contains('popup-slider-show-gallery-wrap--show')) {
        if(e.keyCode === 27) {
            closeShowGallery();
        } else if (e.key === 'ArrowLeft') {
            currentSliderShowIndex = (currentSliderShowIndex > 0) ? currentSliderShowIndex - 1 : locationItems.length - 1;
            updateSliderShowGalleryPosition();
        } else if (e.key === 'ArrowRight') {
            currentSliderShowIndex = (currentSliderShowIndex < locationItems.length - 1) ? currentSliderShowIndex + 1 : 0;
            updateSliderShowGalleryPosition();
        }
    }
});
// Popup slider functionaliry

const galleryPopupLocations = document.querySelector('.popup-opacity--locations-gallery');
const popupLocations = document.querySelector('.popup-locations');
const galleryList = document.querySelector('.popup-locations__list');
const locationsItems = document.querySelectorAll('.slider-our-locations__item');
const locationsLink = document.querySelectorAll('.slider-our-locations__link');
// const buttonOpenSliderLocations = document.querySelectorAll('.button--open-slider-locations');
const btnCloseLocationsGallery = document.querySelector('.button-close--locations-gallery');

const galleryPrevBtn = document.querySelector('#popup-locations-left');
const galleryNextBtn = document.querySelector('#popup-locations-right');
const galleryItems = [];
let currentSlideIndex = 0;

//Fill gallery with images (Заполнить popup slider изображениями)

const initGallery = () => {
    galleryList.innerHTML = '';
    locationsItems.forEach(item => {
        const img = item.querySelector('img');

        const slide = document.createElement('li');
        slide.className = 'popup-locations__item';
        slide.innerHTML = `<img class="popup-locations__img" src="${img.src}" alt="${img.alt}">
        <p class="popup-locations__text">${img.alt}</p>`;
        galleryList.appendChild(slide);
        galleryItems.push(slide);
    });
};

const updateGalleryPosition = () => {
    galleryList.style.transform = `translateX(-${currentSlideIndex * 100}%)`;
};

//Open gallery with specific slide (Открыть галерею с определенным слайдом)
const openGallery = (index) => {
    if(galleryItems.length === 0) initGallery();

    currentSlideIndex = index;
    // galleryList.style.transform = `translateX(-${index * 100}%)`;
    updateGalleryPosition();
    galleryPopupLocations.classList.add('popup-opacity--show');
    popupLocations.classList.add('popup-locations--show');
    document.body.classList.add('no-scroll');
};

// инициализация при загрузке
document.addEventListener('DOMContentLoaded', () => {
    locationsLink.forEach((link, index) => {
        link.addEventListener('click', (e) => {
            e.preventDefault();
            openGallery(index);
        });
    });
});

//Close gallery (Закрыть попап слайдера c jxbcnrjq)
const closeGallery = () => {
    galleryPopupLocations.classList.remove('popup-opacity--show');
    popupLocations.classList.remove('popup-locations--show');
    document.body.classList.remove('no-scroll');

    //Очистка через 300ms (после завершения анимации)
    setTimeout(() => {
        galleryList.innerHTML = '';
        galleryItems.length = 0;
    }, 300);
};

//Navigation controls
galleryPrevBtn.addEventListener('click', () => {
    currentSlideIndex = (currentSlideIndex > 0) ? currentSlideIndex - 1 : document.querySelectorAll('.popup-locations__item').length - 1;
    updateGalleryPosition();
});

galleryNextBtn.addEventListener('click', () => {
    currentSlideIndex = (currentSlideIndex < document.querySelectorAll('.popup-locations__item').length - 1) ? currentSlideIndex + 1 : 0;
    updateGalleryPosition();
});

//Close gallery
btnCloseLocationsGallery.addEventListener('click', closeGallery);

//Close when clicking outside
galleryPopupLocations.addEventListener('click', (e) => {
    if(e.target === galleryPopupLocations) {
        closeGallery();
    }
});

// Keyboard navigation
window.addEventListener('keydown', (e) => {
    if(galleryPopupLocations.classList.contains('popup-opacity--show') || popupLocations.classList.contains('popup-locations--show')) {
        if(e.keyCode === 27) {
            closeGallery();
        } else if (e.key === 'ArrowLeft') {
            currentSlideIndex = (currentSlideIndex > 0) ? currentSlideIndex - 1 : locationItems.length - 1;
            updateGalleryPosition();
        } else if (e.key === 'ArrowRight') {
            currentSlideIndex = (currentSlideIndex < locationItems.length - 1) ? currentSlideIndex + 1 : 0;
            updateGalleryPosition();
        }
    }
});

// Popup locations form

/*Ищем подходящий селектор во всем документе*/
const popupOpacityLocations = document.querySelector('.popup-opacity--locations');
const buttonOpenFormLocations = document.querySelectorAll('.button--open-locations');
const popupLocationsForm = document.querySelector('.popup-locations-form');

/*Ищем подходящий селектор в форме*/
const popupCloseLocations = document.querySelectorAll('.button-close--locations');

/*Ищем подходящий селектор в форме locations*/
const formLocations = popupLocationsForm.querySelector('.locations-form');
const nameLocations = popupLocationsForm.querySelector('.locations-form__input--name');
const emailLocations = popupLocationsForm.querySelector('.locations-form__input--email');

/*Не все браузеры поддерживают localStorage поэтому проверим работоспособность.*/
// let isStorageSupport = true;
// let storage = '';

try {
  storage = localStorage.getItem('name');
} catch (err) {
  isStorageSupport = false;
}

/*Обработчик событй для отображения формы locations*/
for (let i = 0; i < buttonOpenFormLocations.length; i++) {
  buttonOpenFormLocations[i].addEventListener('click', function(evt) {

 /*Стандартное действие по умолчанию у ссылки переход на другую страницу.
 Такое поведение нам не нужно, поэтому отключим его.*/
    evt.preventDefault();
    popupLocationsForm.classList.add('popup-locations-form--show');
    // if('popup-contacts-form--show') {
    if('popup-locations-form--show') {
      popupOpacityLocations.classList.add('popup-opacity--show');
    } else {
      popupOpacityLocations.classList.remove('popup-opacity--show');
    }
    if(storage) {
      nameField.value = storage;
      emailField.focus();
     } else {
    /*Установим фокус при открытии модального окна в поле ввода логина. */
      nameField.focus();
    }
  });
};

  /*Обработчик событий для закрытия формы*/
  for (let i = 0; i < popupCloseLocations.length; i++) {
    popupCloseLocations[i].addEventListener('click', function(evt) {
      evt.preventDefault();
      popupOpacityLocations.classList.remove('popup-opacity--show');
      popupLocationsForm.classList.remove('popup-locations-form--show');
    });

   // /*Повесим обработчик отправки данных на форму ретуши и отменим его.
// если поле пустое отправки не будет */
    formLocations.addEventListener('submit', function(evt) {
      if(!numberRetouch.value) {
        evt.preventDefault();
        popupLocationsForm.classList.remove("popup-form-error");
        popupLocationsForm.offsetWidth = popupLocationsForm.offsetWidth;
        popupLocationsForm.classList.add("popup-form-error");
      } else {
        if (isStorageSupport) {
          console.log(localStorage.setItem('number', numberRetouch.value));
        }
      }
    });
  };

  /*Добавим обработчик события, который будет отлавливать
  нажатие кнопки Esc и в случае, если модальное окно открыто, закрывать его.*/
  window.addEventListener('keydown', function (evt) {
    if (evt.keyCode === 27) {
      if (popupLocationsForm.classList.contains('popup-locations-form--show') || popupOpacityLocations.classList.contains('popup-opacity--show')) {
        evt.preventDefault();
        popupLocationsForm.classList.remove('popup-locations-form--show');
        popupLocationsForm.classList.remove('popup-form--error');
        popupOpacityLocations.classList.remove('popup-opacity--show');
      }
    }
  });

//Popup reviews form

/*Ищем подходящий селектор во всем документе*/
const popupOpacityReviews = document.querySelector('.popup-opacity--reviews');
const buttonOpenFormReviews = document.querySelectorAll('.button--open-reviews');
const popupReviews = document.querySelector('.popup-reviews-form');

/*Ищем подходящий селектор в форме*/
const popupCloseReviews = document.querySelectorAll('.button-close--reviews');

/*Ищем подходящий селектор в форме комментариев*/
const formReviews = popupReviews.querySelector('.reviews-form');
const reviewsName = popupReviews.querySelector('.reviews-form__input--name');
const reviewsEmail = popupReviews.querySelector('.reviews-form__input--email');
/*Не все браузеры поддерживают localStorage поэтому проверим работоспособность.*/
// let isStorageSupport = true;
// let storage = '';

try {
  storage = localStorage.getItem('name');
} catch (err) {
  isStorageSupport = false;
}

/*Обработчик событий для отображения коментариев формы */
for (let i = 0; i < buttonOpenFormReviews.length; i++) {
  buttonOpenFormReviews[i].addEventListener('click', function(evt) {

 /*Стандартное действие по умолчанию у ссылки переход на другую страницу.
 Такое поведение нам не нужно, поэтому отключим его.*/
    evt.preventDefault();
    popupReviews.classList.add('popup-reviews--show');
    // if('popup-contacts-form--show') {
    if('popup-reviews--show') {
      popupOpacityReviews.classList.add('popup-opacity--show');
    } else {
      popupOpacityReviews.classList.remove('popup-opacity--show');
    }
    if(storage) {
        reviewsName.value = storage;
        reviewsEmail.focus();
    } else {
    /*Установим фокус при открытии модального окна в поле ввода логина. */
    reviewsName.focus();
    }
  });
};

  /*Обработчик событий для закрытия формы*/
  for (let i = 0; i < popupCloseReviews.length; i++) {
    popupCloseReviews[i].addEventListener('click', function(evt) {
      evt.preventDefault();
      popupOpacityReviews.classList.remove('popup-opacity--show');
      popupReviews.classList.remove('popup-reviews--show');
    });

   // /*Повесим обработчик отправки данных на форму комментариев и отменим его.
// если поле пустое отправки не будет */
    formReviews.addEventListener('submit', function(evt) {
      if(!reviewsName.value) {
        evt.preventDefault();
        popupReviews.classList.remove("popup-form-error");
        popupReviews.offsetWidth = popupReviews.offsetWidth;
        popupReviews.classList.add("popup-form-error");
      } else {
        if (isStorageSupport) {
          console.log(localStorage.setItem('name', reviewsName.value));
        }
      }
    });
  };

  /*Добавим обработчик события, который будет отлавливать
  нажатие кнопки Esc и в случае, если модальное окно открыто, закрывать его.*/
  window.addEventListener('keydown', function (evt) {
    if (evt.keyCode === 27) {
      if (popupReviews.classList.contains('popup-reviews--show') || popupOpacityReviews.classList.contains('popup-opacity--show')) {
        evt.preventDefault();
        popupReviews.classList.remove('popup-reviews--show');
        popupReviews.classList.remove('popup-form--error');
        popupOpacityReviews.classList.remove('popup-opacity--show');
      }
    }
  });

//Popup contacts form

/*Ищем подходящий селектор во всем документе*/
const popupOpacityRetouch = document.querySelector('.popup-opacity--retouch');
const buttonOpenFormRetouch = document.querySelectorAll('.button--open-retouch');
const popupRetouch = document.querySelector('.popup-retouch');

/*Ищем подходящий селектор в форме*/
const popupCloseRetouch = document.querySelectorAll('.button-close--retouch');

/*Ищем подходящий селектор в форме ретушь*/
const formRetouch = popupRetouch.querySelector('.form-retouch');
const numberRetouch = popupRetouch.querySelector('.form-retouch__input');

/*Не все браузеры поддерживают localStorage поэтому проверим работоспособность.*/
// let isStorageSupport = true;
// let storage = '';

try {
  storage = localStorage.getItem('number');
} catch (err) {
  isStorageSupport = false;
}

/*Обработчик событй для отображения формы */
for (let i = 0; i < buttonOpenFormRetouch.length; i++) {
  buttonOpenFormRetouch[i].addEventListener('click', function(evt) {

 /*Стандартное действие по умолчанию у ссылки переход на другую страницу.
 Такое поведение нам не нужно, поэтому отключим его.*/
    evt.preventDefault();
    popupRetouch.classList.add('popup-retouch--show');
    // if('popup-contacts-form--show') {
    if('popup-retouch--show') {
      popupOpacityRetouch.classList.add('popup-opacity--show');
    } else {
      popupOpacityRetouch.classList.remove('popup-opacity--show');
    }
    /*Установим фокус при открытии модального окна в поле ввода числа. */
      numberRetouch.focus();
    // }
  });
};

  /*Обработчик событий для закрытия формы*/
  for (let i = 0; i < popupCloseRetouch.length; i++) {
    popupCloseRetouch[i].addEventListener('click', function(evt) {
      evt.preventDefault();
      popupOpacityRetouch.classList.remove('popup-opacity--show');
      popupRetouch.classList.remove('popup-retouch--show');
    });

   // /*Повесим обработчик отправки данных на форму ретуши и отменим его.
// если поле пустое отправки не будет */
    formRetouch.addEventListener('submit', function(evt) {
      if(!numberRetouch.value) {
        evt.preventDefault();
        popupRetouch.classList.remove("popup-form-error");
        popupRetouch.offsetWidth = popupRetouch.offsetWidth;
        popupRetouch.classList.add("popup-form-error");
      } else {
        if (isStorageSupport) {
          console.log(localStorage.setItem('number', numberRetouch.value));
        }
      }
    });
  };

  /*Добавим обработчик события, который будет отлавливать
  нажатие кнопки Esc и в случае, если модальное окно открыто, закрывать его.*/
  window.addEventListener('keydown', function (evt) {
    if (evt.keyCode === 27) {
      if (popupRetouch.classList.contains('popup-retouch--show') || popupOpacityRetouch.classList.contains('popup-opacity--show')) {
        evt.preventDefault();
        popupRetouch.classList.remove('popup-retouch--show');
        // popupContactsForm.classList.remove('popup-form--error');
        popupOpacityRetouch.classList.remove('popup-opacity--show');
      }
    }
  });

//Slider show

const slider = document.querySelector('.slider-show');
const sliderList = slider.querySelector('.slider-show__list');
const sliderItem = slider.querySelectorAll('.slider-show__item');

const btnLeft = slider.querySelector('.control--left');
const btnRight = slider.querySelector('.control--right');

const dots = slider.querySelector('.dots');
const dotsBtn = dots.querySelectorAll('.dots__button');

let current = 0;
let prev = 4;
let next = 1;

//Функция перелистывания слайдов кнопкой назад
const gotoPrev = () => current > 0 ? showSlides(current - 1) : showSlides(sliderItem.length - 1);

//Функция перелистывания слайдов кнопкой вперед
const gotoNext = () => current < 4 ? showSlides(current + 1) : showSlides(0);

//Функция показа слайдов и dots
const showSlides = (number) => {
  current = number;
  prev = current - 1;
  next = current + 1;

  for (let i = 0; i < sliderItem.length; i++) {
    sliderItem[i].classList.remove("slider-show__item--active");
    sliderItem[i].classList.remove("slider-show__item--prev");
    sliderItem[i].classList.remove("slider-show__item--next");
  }

  if (next == 5) {
    next = 0;
  }

  if (prev == -1) {
    prev = 4;
  }

  //Перебираем кнопки (dots) переключения слайдов если текущий слайд и кнопка не активны удаляем класс dots__button--active
  for (let j = 0; j < dotsBtn.length; j++) {
      dotsBtn[j].classList.remove('dots__button--active')
  }
    //Активной кнопке (dots) присваеваем класс dots__button--active
    dotsBtn[current].classList.add('dots__button--active');

    sliderItem[current].classList.add("slider-show__item--active");
    sliderItem[prev].classList.add("slider-show__item--prev");
    sliderItem[next].classList.add("slider-show__item--next");
  }

  //Обработчки событий клика принажатии на левую кнопку
  btnLeft.addEventListener('click', gotoPrev);

  //Обработчки событий клика принажатии на правую кнопку
  btnRight.addEventListener('click', gotoNext);

  //Обработчик событий для кнопок (dots)
  dots.addEventListener('click', (evt) => {
    //Перебираем в цикле элементы массива кнопок (dots)
    for (let i = 0; i< dotsBtn.length + 1; i++) {
      if(evt.target.classList.contains('dots__button') && evt.target == dotsBtn[i]) {
        showSlides(i);
      }
    }
  });

//Slider our locations

const sliderWrapper = document.querySelector('.slider-our-locations');
const sliderOurLocations = document.querySelector('.slider-our-locations__list');
const firstCardWidth = sliderOurLocations.querySelector('.slider-our-locations__item').offsetWidth;
const arrowBtns = document.querySelectorAll('.control-our-locations');
const sliderChildrens = [...sliderOurLocations.children];

let isDragging = false;
let isAutoPlay = true, startX, startScrollLeft, timeoutId;

// Get the number of cards thet can fit in the sliderOurLocations at once
// Получим количество карточек, которые могут поместиться в карусели одновременно.
let cardPerView = Math.round(sliderOurLocations.offsetWidth / firstCardWidth);

// Insert copies of the last few cards to beginning of sliderOurLocations for infinite scrolling
// Вставляем копии последних нескольких карточек в начало карусели для бесконечной прокрутки.
sliderChildrens.slice(-cardPerView).reverse().forEach(card => {
  sliderOurLocations.insertAdjacentHTML('afterbegin', card.outerHTML);
});

// Insert copies of the first few cards to end of sliderOurLocations for infinite scrolling
// Вставляем копии первых нескольких карточек в конец карусели для бесконечной прокрутки.
sliderChildrens.slice(0, cardPerView).forEach(card => {
  sliderOurLocations.insertAdjacentHTML('beforeend', card.outerHTML);
});

// Scroll the sliderOurLocations at appropriate postition to hide first few duplicate cards on Firefox
// Прокрутим карусель в нужном месте, чтобы скрыть первые несколько дубликатов карточек в Firefox.
sliderOurLocations.classList.add('no-transition');
sliderOurLocations.scrollLeft = sliderOurLocations.offsetWidth;
sliderOurLocations.classList.remove('no-transition');

// Add event listeners for the arrow buttons to scroll the sliderOurLocations left and right
// Добавим прослушиватели событий для кнопок со стрелками для прокрутки карусели влево и вправо.
arrowBtns.forEach(btn => {
    btn.addEventListener('click', () => {
      sliderOurLocations.scrollLeft += btn.id == 'left' ? -firstCardWidth : firstCardWidth;
    });
});

const infiniteScroll = () => {
    // If the slider is at the biginning, scroll to the end
    // Если карусель находится в самом начале, прокрутим до конца
    if(sliderOurLocations.scrollLeft === 0) {
      sliderOurLocations.classList.add('no-transition');
      sliderOurLocations.scrollLeft = sliderOurLocations.scrollWidth - (2 * sliderOurLocations.offsetWidth);
      sliderOurLocations.classList.remove('no-transition');
    } else if (Math.ceil(sliderOurLocations.scrollLeft) === sliderOurLocations.scrollWidth - sliderOurLocations.offsetWidth) {
      sliderOurLocations.classList.add('no-transition');
      sliderOurLocations.scrollLeft = sliderOurLocations.offsetWidth;
      sliderOurLocations.classList.remove('no-transition');
    }

    // Clear existing timeout & start autoplay if mouse is not hovering over slider
    // Очистим существующий тайм-аут и запустить автовоспроизведение, если мышь не наведена на карусель.
    clearTimeout(timeoutId);
    if(!sliderWrapper.matches(':hover')) autoPlay();
};

const autoPlay = () => {
    // Return if window is smaller that 800 or isAutoPlay is false
    // Возврат, если окно меньше 800 или isAutoPlay имеет значение false
    if(window.innerWidth < 800 || !isAutoPlay) return;
    // AutoPlay the slider after every 2500 ms
    // Автозапуск карусели каждые 2500 мс
    timeoutId = setTimeout( () => sliderOurLocations.scrollLeft += firstCardWidth, 2500);
};
autoPlay();


sliderOurLocations.addEventListener('scroll', infiniteScroll);
sliderWrapper.addEventListener('mouseenter', () => clearTimeout(timeoutId));
sliderWrapper.addEventListener('mouseleave', autoPlay);

//Slider reviews

//Общее количество слайдов в слайдере
const NUMBER_OF_SLIDES = 3;

//Ширина одного слайда
const WIDTH_SLIDE = 340;

//Размер gap
const GAP = 24;


const NAME = ['Мария', 'Сергей', 'Руслан'];
const IMAGES = ['maria.png', 'sergey.png', 'ruslan.png'];
const TEXT = ['Съешь еще этих мягких французских булок, да выпей чаю. Съешь еще этих мягких французских булок, да выпей чаю. Съешь еще этих мягких французских булок, да выпей чаю.',
              'Съешь еще этих мягких французских булок, да выпей чаю. Съешь еще этих мягких французских булок, да выпей чаю. Съешь еще этих мягких французских булок, да выпей чаю.',
              'Съешь еще этих мягких французских булок, да выпей чаю. Съешь еще этих мягких французских булок, да выпей чаю. Съешь еще этих мягких французских булок, да выпей чаю.']

const sliderPlace = document.querySelector('.slider-reviews__list'); //Получаем доступ к слайдеру
const widthOffset = document.querySelector('.slider-reviews').offsetWidth; //Получаем доступ к ширине элемента слайдер
const slideTemplate = document.querySelector('#slide-template').content.querySelector('.slider-reviews__item'); //Получаем доступ к элементу template

const prevButton = document.querySelector('.control-reviews--left'); //получаем доступ к следующей кнопке
const nextButton = document.querySelector('.control-reviews--right'); //получаем доступ к предыдущей кнопке

//Для разных экранов
const mediaQuery = {
    desktop: window.matchMedia('(min-width: 1301px)'),
    tablet: window.matchMedia('(min-width: 900px) and (max-width: 1300px'),
    mobile: window.matchMedia('(max-width: 899px)'),
};

//будем хранить номер активного слайда
let activeImage = 0;
//флаг будет срабатывать при многократном нажатия кнопки
let flag = true;

if (mediaQuery.mobile.matches) {
    //присваиваем ширину равную блоку из одной картинки
    sliderPlace.style.width = widthOffset + 'px';
}

if (mediaQuery.tablet.matches) {
    sliderPlace.style.width = ((WIDTH_SLIDE * 2) + GAP) + 'px';
}

if (mediaQuery.desktop.matches) {
    sliderPlace.style.width = ((WIDTH_SLIDE * 3) + GAP) + 'px';
}


// Обновляет стили активного слайда
const updateActiveSlide = (active) => {
     const sliderItem = sliderPlace.querySelectorAll('.slider-reviews__item');
     sliderItem.forEach(slide => {
       slide.classList.remove('active');
       slide.style.transform = 'none';
    });

    // Добавляем класс и стили активному слайду
    const activeSlide = active;
    if (activeSlide) {
      activeSlide.classList.add('active');
      activeSlide.style.transform = 'translateY(-121px)';
 }
};


//функция отрисовки изображений (слайдов)
const initSlider = () => {
    const slideCloneActive = slideTemplate.cloneNode(true);

    	slideCloneActive.querySelector('.revievs-card');
        slideCloneActive.querySelector('.reviews-card__img').setAttribute('src', `img/${IMAGES[activeImage]}`);
        slideCloneActive.querySelector('.reviews-card__img').setAttribute('alt', `${IMAGES[activeImage]}`);
        slideCloneActive.querySelector('.reviews-card__title').textContent = NAME[activeImage];
        slideCloneActive.querySelector('.reviews-card__text').textContent = TEXT[activeImage];
        slideCloneActive.classList.add('active');
    sliderPlace.append(slideCloneActive);
    nextImageGenerate();
    prevImageGenerate();
};

//функция генерации следующего изображени относительно активного
const nextImageGenerate = () => {
    //прибавим к текущему изображению 1 и новое значение сохраним в переменную nextImage
    let nextImage = activeImage + 1;
    //Сделаем проверку если следующий слайд больше длины массива
    if(nextImage >= NUMBER_OF_SLIDES) {
        //то присваиваем nextImage 0
        nextImage = 0;
    }

    const slideCloneNext = slideTemplate.cloneNode(true);
    	slideCloneNext.querySelector('.revievs-card');
        slideCloneNext.querySelector('.reviews-card__img').setAttribute('src', `img/${IMAGES[nextImage]}`);
        slideCloneNext.querySelector('.reviews-card__img').setAttribute('alt', `${IMAGES[nextImage]}`);
        slideCloneNext.querySelector('.reviews-card__title').textContent = NAME[nextImage];
        slideCloneNext.querySelector('.reviews-card__text').textContent = TEXT[nextImage];
    sliderPlace.append(slideCloneNext);
};

//функция генерации предыдущего изображени относительно активного
//аргумент позволяет отслеживать ширину слайда
const prevImageGenerate = (widthElement = false) => {
    //отнимем от текущего изображения 1 и новое значение сохраним в переменную prevImage
    let prevImage = activeImage - 1;

    //Сделаем проверку если предыдущий слайд меньше 0
    if(prevImage < 0) {
        //то присваиваем prevImage последний элемент массива
        prevImage = NUMBER_OF_SLIDES - 1;
    }

    const slideClonePrev = slideTemplate.cloneNode(true);
    	slideClonePrev.querySelector('.revievs-card');
        slideClonePrev.querySelector('.reviews-card__img').setAttribute('src', `img/${IMAGES[prevImage]}`);
        slideClonePrev.querySelector('.reviews-card__img').setAttribute('alt', `${IMAGES[prevImage]}`);
        slideClonePrev.querySelector('.reviews-card__title').textContent = NAME[prevImage];
        slideClonePrev.querySelector('.reviews-card__text').textContent = TEXT[prevImage];

        if(widthElement) {
            slideClonePrev.style.width = 0;
        }
        //добавим созданное изображение в sliderPlace до текущего изображения
        sliderPlace.prepend(slideClonePrev);
};


//функция перелистывания к следующему слайду
const nextSlide = () => {
    //проверка на частое нажатие кнопки ждем до конца анимации
    if(!flag) return;
    flag = !flag;
    //прибавляем 1 слайд
    activeImage++;
    //проверка если слайд больше длины массива присваиваем 0
    if(activeImage >= NUMBER_OF_SLIDES) {
        activeImage = 0;
    }
    nextImageGenerate();

    //Используем класс active для слайда только на desktop
    if(mediaQuery.desktop.matches) {
        //Присвоим активный слайд
        const activeSlide = document.querySelector('.slider-reviews__item:nth-child(3)');
        //Вызовем функция с активным слайдом
        updateActiveSlide(activeSlide);
    }
    //вызываю функцию анимации
    animate({
        duration: 1000,
        draw: function(progress) {

            document.querySelector('.slider-reviews__item:last-child').style.width = (widthOffset * progress) + 'px',

            //получаем доступ к первому слайду (картинке)
            document.querySelector('.slider-reviews__item').style.width = widthOffset * (1 - progress) + 'px'

        },
        //удаляем первый слайд после окончания анимации
        removeElement: document.querySelector('.slider-reviews__item')
    });
};

//функция перелистывания к предыдущему слайду
const prevSlide = () => {
    //проверка на частое нажатие кнопки ждем до конца анимации
    if(!flag) return;
    flag = !flag;
    //вычитаем 1 слайд
    activeImage--;
    //если слайд меньше 0
    if (activeImage < 0) {
        //присвоить activeImage последний слайд в массиве
        activeImage = NUMBER_OF_SLIDES - 1;
    }

    prevImageGenerate(true);

    //Используем класс active для слайда только на desktop
    if(mediaQuery.desktop.matches) {
        const activeSlide = document.querySelector('.slider-reviews__item:nth-child(2)');

        updateActiveSlide(activeSlide);
    }

    //вызываю функцию анимации
    animate({
        duration: 1000,
        draw: function(progress) {

                //получаем доступ к первому слайду (картинке)
                document.querySelector('.slider-reviews__item').style.width = (widthOffset * progress) + 'px',

                document.querySelector('.slider-reviews__item:last-child').style.width = widthOffset * (1 - progress) + 'px'

            },
            //удаляем последний слайд после окончания анимации
            removeElement: document.querySelector('.slider-reviews__item:last-child')
        });
};

//Функция анимации которая принимает объект с 3 ключами,
// 1 время анимации,
// 2 ссылка на функцию которая рисует анимацию,
// 3 ссылка на элемент который нужно удалить
const animate = ({duration, draw, removeElement}) => {
    //получим текущее (начальное) время
    const start = performance.now();
    console.log(start);
    //расчитаем время анимации (количество шагов)
    //пишем метод > который принимает функцию через рекурсивную ссылку > передаю аргумент время
    requestAnimationFrame(function animate(time) {
        //расчитаем количество шагов
        let step = (time - start) / duration;
        console.log(step);
        //сделать проверки если количество шагов больше 1 step = 1
        if(step > 1) {
            step = 1;
        }
        //иначе делаем анимацию
        draw(step);
        //если шаг менее 1
        if(step < 1) {
            //снова пишем и ссылку на функцию
            requestAnimationFrame(animate);
        }
        //иначе удаляем помеченный на удаление элемент
        else {
            removeElement.remove();
            flag = true;
        }
    });
};

//запускаем функции
 initSlider();

//вешаем кнопки на обработчик событий
nextButton.addEventListener('click', nextSlide);
prevButton.addEventListener('click', prevSlide);

// Форма загрузки фотографий

document.addEventListener('DOMContentLoaded', function() {
  const fileInput = document.getElementById('reviews-form-btn');
  const uploadForm = document.getElementById('reviewsForm');
//   const previewContainer = document.getElementById('previewContainer');
  const topSection = document.getElementById('topSection');
  const bottomSection = document.getElementById('bottomSection');
  const previewPlaceholder = document.getElementById('previewPlaceholder');
//   const displayInfo = document.getElementById('displayInfo');
  const loader = document.getElementById('loader');
  
  // Массив для хранения выбранных файлов
  let selectedFiles = [];
  
  // Обработчик изменения выбора файлов
  fileInput.addEventListener('change', function(e) {
      selectedFiles = Array.from(e.target.files);
      updatePreviewLayout();
  });
  
  // Функция для обновления layout превью
  function updatePreviewLayout() {
      // Очищаем секции
      topSection.innerHTML = '';
      bottomSection.innerHTML = '';
      
      // Показываем/скрываем плейсхолдер
      if (selectedFiles.length === 0) {
          previewPlaceholder.style.display = 'flex';
        //   displayInfo.textContent = '';
          return;
      } else {
          previewPlaceholder.style.display = 'none';
      }
      
    //   // Определяем режим отображения в зависимости от количества файлов
      let mode;
      if (selectedFiles.length === 1) {
          mode = 'single';
        //   displayInfo.textContent = 'Режим отображения: 1 большое изображение (450×300px)';
      } else if (selectedFiles.length === 2) {
          mode = 'double';
        //   displayInfo.textContent = 'Режим отображения: 2 маленьких изображения (166×144px)';
      } else if (selectedFiles.length === 3) {
          mode = 'triple';
        //   displayInfo.textContent = 'Режим отображения: 1 вверху (450×300px) и 2 внизу (166×144px)';
      } else if (selectedFiles.length >= 4) {
          mode = 'quad';
        //   displayInfo.textContent = 'Режим отображения: 2 вверху и 2 внизу (166×144px)';
      }
      
      // Обрабатываем каждый файл и добавляем в соответствующую секцию
      selectedFiles.forEach((file, index) => {
          const reader = new FileReader();
          
          reader.onload = function(e) {
              const previewItem = document.createElement('div');
              previewItem.className = 'preview-item';
              
              // Добавляем класс в зависимости от позиции
              if (mode === 'single') {
                  previewItem.classList.add('single');
              } else if (mode === 'double') {
                  previewItem.classList.add('double');
              } else if (mode === 'triple') {
                  if (index === 0) {
                      previewItem.classList.add('single');
                  } else {
                      previewItem.classList.add('double');
                  }
              } else if (mode === 'quad') {
                  previewItem.classList.add('double');
              }
              
              const img = document.createElement('img');
              img.src = e.target.result;
              img.alt = file.name;
              
              // Устанавливаем размеры изображения через CSS классы
              
              // Кнопка удаления
              const removeBtn = document.createElement('button');
              removeBtn.className = 'remove-btn';
              removeBtn.addEventListener('click', function() {
                  selectedFiles.splice(index, 1);
                  updatePreviewLayout();
              });
              
              previewItem.appendChild(img);
              previewItem.appendChild(removeBtn);
              
              // Добавляем в соответствующую секцию
              if (mode === 'single') {
                  topSection.appendChild(previewItem);
              } 
              else if (mode === 'double') {
                  bottomSection.appendChild(previewItem);
              } 
              else if (mode === 'triple') {
                  if (index === 0) {
                      topSection.appendChild(previewItem);
                  } else {
                      bottomSection.appendChild(previewItem);
                  }
              } 
              else if (mode === 'quad') {
                  if (index < 2) {
                      topSection.appendChild(previewItem);
                  } else {
                      bottomSection.appendChild(previewItem);
                  }
              }
          };
          
          reader.readAsDataURL(file);
      });
  }
  
  // Обработка отправки формы
  uploadForm.addEventListener('submit', function(e) {
      e.preventDefault();
      
    //   if (selectedFiles.length === 0) {
    //       alert('Пожалуйста, выберите хотя бы одно изображение');
    //       return;
    //   }
      
      // Показываем прелоадер
      loader.style.display = 'flex';
      
      // Собираем данные формы
      const formData = new FormData();
      
      // Добавляем файлы
      selectedFiles.forEach(file => {
          formData.append('images', file);
      });
      
      // Здесь должна быть реальная отправка на сервер
      // Для демонстрации используем setTimeout
      setTimeout(() => {
          // Скрываем прелоадер
          loader.style.display = 'none';
          
          // Показываем сообщение об успехе
          alert('Изображения успешно загружены!');
          
          // Очищаем форму
          uploadForm.reset();
          selectedFiles = [];
          updatePreviewLayout();
      }, 2000);
  });
  
  // Инициализация превью
  updatePreviewLayout();
});



